import React, { useState, useRef } from 'react';
import { Search, Settings, Play, Download, BookOpen, Globe, Mic, User, Clock, Target, Loader2, ExternalLink } from 'lucide-react';

const AIVideoGenerator = () => {
  const [currentStep, setCurrentStep] = useState('input');
  const [topic, setTopic] = useState('');
  const [settings, setSettings] = useState({
    language: 'English',
    voiceType: 'professional',
    videoLength: 'medium',
    difficulty: 'intermediate',
    character: 'teacher',
    presenter: 'animated'
  });
  const [progress, setProgress] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState(null);
  const [sources, setSources] = useState([]);
  const videoRef = useRef(null);

  const languageOptions = [
    'English', 'Spanish', 'French', 'German', 'Chinese', 'Japanese', 'Arabic', 'Hindi'
  ];

  const voiceOptions = [
    { value: 'professional', label: 'Professional', icon: '🎯' },
    { value: 'friendly', label: 'Friendly', icon: '😊' },
    { value: 'energetic', label: 'Energetic', icon: '⚡' },
    { value: 'calm', label: 'Calm & Soothing', icon: '🧘' }
  ];

  const lengthOptions = [
    { value: 'short', label: '1-2 minutes', duration: '1-2 min' },
    { value: 'medium', label: '3-5 minutes', duration: '3-5 min' },
    { value: 'long', label: '6-10 minutes', duration: '6-10 min' }
  ];

  const difficultyOptions = [
    { value: 'beginner', label: 'Beginner', desc: 'Simple explanations' },
    { value: 'intermediate', label: 'Intermediate', desc: 'Balanced approach' },
    { value: 'expert', label: 'Expert', desc: 'Technical details' }
  ];

  const characterOptions = [
    { value: 'teacher', label: 'Teacher', icon: '👩‍🏫' },
    { value: 'scientist', label: 'Scientist', icon: '👨‍🔬' },
    { value: 'storyteller', label: 'Storyteller', icon: '📚' },
    { value: 'news_anchor', label: 'News Anchor', icon: '📺' }
  ];

  const presenterOptions = [
    { value: 'animated', label: 'Animated Avatar' },
    { value: 'realistic', label: 'Realistic Human' },
    { value: 'cartoon', label: 'Cartoon Character' }
  ];

  const mockSources = [
    { title: "Wikipedia: Artificial Intelligence", url: "https://en.wikipedia.org/wiki/Artificial_intelligence" },
    { title: "Nature: Recent AI Developments", url: "https://nature.com/ai-developments" },
    { title: "MIT Technology Review: AI Trends", url: "https://technologyreview.com/ai-trends" }
  ];

  const simulateGeneration = async () => {
    setIsGenerating(true);
    setCurrentStep('generating');
    setProgress(0);

    const stages = [
      { name: 'Researching topic...', duration: 2000 },
      { name: 'Analyzing sources...', duration: 1500 },
      { name: 'Creating summary...', duration: 2000 },
      { name: 'Generating script...', duration: 1500 },
      { name: 'Synthesizing voice...', duration: 2500 },
      { name: 'Creating video...', duration: 3000 },
      { name: 'Finalizing output...', duration: 1000 }
    ];

    for (let i = 0; i < stages.length; i++) {
      setProgress(((i + 1) / stages.length) * 100);
      await new Promise(resolve => setTimeout(resolve, stages[i].duration));
    }

    // Simulate generated content
    setGeneratedContent({
      summary: This video explores ${topic}, covering its key concepts, applications, and recent developments. The content has been tailored for ${settings.difficulty} level understanding and presented in ${settings.language}.,
      videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", // Sample video
      duration: settings.videoLength === 'short' ? '2:15' : settings.videoLength === 'medium' ? '4:30' : '8:45'
    });
    setSources(mockSources);
    
    setIsGenerating(false);
    setCurrentStep('result');
  };

  const handleGenerate = () => {
    if (!topic.trim()) return;
    simulateGeneration();
  };

  const resetApp = () => {
    setCurrentStep('input');
    setTopic('');
    setProgress(0);
    setGeneratedContent(null);
    setSources([]);
  };

  if (currentStep === 'generating') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="container mx-auto px-6 py-12">
          <div className="max-w-2xl mx-auto text-center">
            <div className="mb-8">
              <Loader2 className="w-16 h-16 mx-auto text-blue-600 animate-spin mb-4" />
              <h2 className="text-3xl font-bold text-gray-800 mb-2">Creating Your Video</h2>
              <p className="text-gray-600">Using AI to research and generate content about "{topic}"</p>
            </div>
            
            <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
              <div className="mb-6">
                <div className="flex justify-between text-sm text-gray-600 mb-2">
                  <span>Progress</span>
                  <span>{Math.round(progress)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-300 ease-out"
                    style={{ width: ${progress}% }}
                  ></div>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center justify-center space-x-3 text-gray-700">
                  <Search className="w-5 h-5" />
                  <span>AI Research Engine Active</span>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center space-x-2">
                    <Globe className="w-4 h-4 text-blue-500" />
                    <span>Language: {settings.language}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Target className="w-4 h-4 text-green-500" />
                    <span>Level: {settings.difficulty}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4 text-purple-500" />
                    <span>Length: {lengthOptions.find(l => l.value === settings.videoLength)?.duration}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <User className="w-4 h-4 text-orange-500" />
                    <span>Style: {settings.character}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentStep === 'result') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="container mx-auto px-6 py-12">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-800 mb-2">Your Video is Ready!</h2>
              <p className="text-gray-600">AI-generated content about "{topic}"</p>
            </div>

            <div className="grid lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2 space-y-6">
                <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                  <video 
                    ref={videoRef}
                    className="w-full h-64 bg-black"
                    controls
                    poster="/api/placeholder/800/400"
                  >
                    <source src={generatedContent?.videoUrl} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h3 className="font-semibold text-lg text-gray-800">AI Generated Explanation</h3>
                        <p className="text-sm text-gray-600">Duration: {generatedContent?.duration}</p>
                      </div>
                      <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors">
                        <Download className="w-4 h-4" />
                        <span>Download</span>
                      </button>
                    </div>
                    <p className="text-gray-700">{generatedContent?.summary}</p>
                  </div>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="font-semibold text-lg text-gray-800 mb-4 flex items-center">
                    <BookOpen className="w-5 h-5 mr-2" />
                    Sources Used
                  </h3>
                  <div className="space-y-3">
                    {sources.map((source, index) => (
                      <div key={index} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                        <ExternalLink className="w-4 h-4 text-blue-500 mt-1 flex-shrink-0" />
                        <div>
                          <a href={source.url} target="_blank" rel="noopener noreferrer" className="font-medium text-blue-600 hover:text-blue-800">
                            {source.title}
                          </a>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-6">
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <h3 className="font-semibold text-lg text-gray-800 mb-4">Video Settings</h3>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Language:</span>
                      <span className="font-medium">{settings.language}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Voice Type:</span>
                      <span className="font-medium capitalize">{settings.voiceType}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Difficulty:</span>
                      <span className="font-medium capitalize">{settings.difficulty}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Character:</span>
                      <span className="font-medium capitalize">{settings.character}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Presenter:</span>
                      <span className="font-medium capitalize">{settings.presenter}</span>
                    </div>
                  </div>
                </div>

                <button 
                  onClick={resetApp}
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white py-3 rounded-xl font-medium transition-all duration-200 transform hover:scale-105"
                >
                  Create Another Video
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <Play className="w-5 h-5 text-white" />
              </div>
              <h1 className="text-xl font-bold text-gray-800">AI Video Generator</h1>
            </div>
            <div className="text-sm text-gray-600">Research → Summarize → Video</div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-12">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold text-gray-800 mb-4">
              Transform Any Topic Into an Engaging Video
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              AI-powered research, intelligent summarization, and automated video generation with customizable voices and characters
            </p>
          </div>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* Main Input */}
            <div className="lg:col-span-2 space-y-6">
              <div className="bg-white rounded-xl shadow-lg p-8">
                <div className="flex items-center space-x-3 mb-6">
                  <Search className="w-6 h-6 text-blue-600" />
                  <h3 className="text-xl font-semibold text-gray-800">What would you like to learn about?</h3>
                </div>
                
                <div className="space-y-4">
                  <textarea
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    placeholder="Enter any topic... e.g., 'Quantum Computing', 'Climate Change Solutions', 'History of Jazz Music'"
                    className="w-full h-32 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  />
                  
                  <div className="flex flex-wrap gap-2">
                    {['Artificial Intelligence', 'Space Exploration', 'Renewable Energy', 'Blockchain Technology'].map((suggestion) => (
                      <button
                        key={suggestion}
                        onClick={() => setTopic(suggestion)}
                        className="px-3 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-full text-sm transition-colors"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              <button
                onClick={handleGenerate}
                disabled={!topic.trim()}
                className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-400 disabled:to-gray-500 text-white py-4 rounded-xl font-semibold text-lg transition-all duration-200 transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed"
              >
                🎬 Generate AI Video
              </button>
            </div>

            {/* Settings Panel */}
            <div className="space-y-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center space-x-2 mb-6">
                  <Settings className="w-5 h-5 text-gray-600" />
                  <h3 className="font-semibold text-gray-800">Customization</h3>
                </div>

                <div className="space-y-6">
                  {/* Language */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <Globe className="w-4 h-4 mr-1" />
                      Language
                    </label>
                    <select
                      value={settings.language}
                      onChange={(e) => setSettings({...settings, language: e.target.value})}
                      className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      {languageOptions.map(lang => (
                        <option key={lang} value={lang}>{lang}</option>
                      ))}
                    </select>
                  </div>

                  {/* Voice Type */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <Mic className="w-4 h-4 mr-1" />
                      Voice Style
                    </label>
                    <div className="grid grid-cols-2 gap-2">
                      {voiceOptions.map(voice => (
                        <button
                          key={voice.value}
                          onClick={() => setSettings({...settings, voiceType: voice.value})}
                          className={`p-2 rounded-lg text-sm transition-colors ${
                            settings.voiceType === voice.value
                              ? 'bg-blue-100 text-blue-700 border-2 border-blue-300'
                              : 'bg-gray-50 hover:bg-gray-100 border-2 border-transparent'
                          }`}
                        >
                          <div>{voice.icon}</div>
                          <div className="font-medium">{voice.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Video Length */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <Clock className="w-4 h-4 mr-1" />
                      Video Length
                    </label>
                    <div className="space-y-2">
                      {lengthOptions.map(length => (
                        <label key={length.value} className="flex items-center">
                          <input
                            type="radio"
                            name="videoLength"
                            value={length.value}
                            checked={settings.videoLength === length.value}
                            onChange={(e) => setSettings({...settings, videoLength: e.target.value})}
                            className="mr-2"
                          />
                          <span className="text-sm">{length.label}</span>
                        </label>
                      ))}
                    </div>
                  </div>

                  {/* Difficulty */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <Target className="w-4 h-4 mr-1" />
                      Difficulty Level
                    </label>
                    <div className="space-y-2">
                      {difficultyOptions.map(diff => (
                        <label key={diff.value} className="flex items-start">
                          <input
                            type="radio"
                            name="difficulty"
                            value={diff.value}
                            checked={settings.difficulty === diff.value}
                            onChange={(e) => setSettings({...settings, difficulty: e.target.value})}
                            className="mr-2 mt-1"
                          />
                          <div>
                            <div className="text-sm font-medium">{diff.label}</div>
                            <div className="text-xs text-gray-500">{diff.desc}</div>
                          </div>
                        </label>
                      ))}
                    </div>
                  </div>

                  {/* Character */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <User className="w-4 h-4 mr-1" />
                      Character Type
                    </label>
                    <div className="grid grid-cols-2 gap-2">
                      {characterOptions.map(char => (
                        <button
                          key={char.value}
                          onClick={() => setSettings({...settings, character: char.value})}
                          className={`p-2 rounded-lg text-sm transition-colors ${
                            settings.character === char.value
                              ? 'bg-blue-100 text-blue-700 border-2 border-blue-300'
                              : 'bg-gray-50 hover:bg-gray-100 border-2 border-transparent'
                          }`}
                        >
                          <div className="text-lg">{char.icon}</div>
                          <div className="font-medium">{char.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Presenter Style */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Presenter Style</label>
                    <div className="space-y-2">
                      {presenterOptions.map(presenter => (
                        <label key={presenter.value} className="flex items-center">
                          <input
                            type="radio"
                            name="presenter"
                            value={presenter.value}
                            checked={settings.presenter === presenter.value}
                            onChange={(e) => setSettings({...settings, presenter: e.target.value})}
                            className="mr-2"
                          />
                          <span className="text-sm">{presenter.label}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIVideoGenerator;
